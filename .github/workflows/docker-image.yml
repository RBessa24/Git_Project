name: Unit Tests

on:
  push:
    branches:
      - master

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Upgrade pip
        run: |
            python -m pip install --upgrade pip
      - name: Install dependencies
        #working-directory: api
        run: |
            cd api
            pip install -r requirements.txt
      - name: Run tests
        env: 
          APP_ENV: test
        run: | 
            pytest


  security_scan:
      name: Security Scan
      runs-on: ubuntu-latest
      steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run Trivy vulnerability scanner in fs mode
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          trivy-config: trivy.yaml



  scan_terraform_scripts:
      name: Scan Terraform Scripts  
      runs-on: ubuntu-latest
      steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Python 3.9
        uses: actions/setup-python@v1
        with:
              python-version: 3.9
      - name: Checkov Test
        uses: bridgecrewio/checkov-action@master 
        with:
          directory: Terraform/ECR
          framework: terraform


  create_ecr_registry:
    name: ECR Registry in AWS
    needs: [unit-tests, security_scan, scan_terraform_scripts]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.4

      - name: Terraform Init
        env: 
           AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
           AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        working-directory: Terraform/ECR   
        run: terraform init

      - name: Terraform Validate
        env: 
           AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
           AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        working-directory: Terraform/ECR   
        run: terraform validate

      - name: Terraform Plan
        id: plan
        env: 
           AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
           AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
           TF_VAR_aws_access_key_id:  ${{ secrets.AWS_ACCESS_KEY_ID }}
           TF_VAR_aws_secret_access_key:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        working-directory: Terraform/ECR    
        run: terraform plan -no-color -input=false
        continue-on-error: true

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1


      - name: Terraform Apply
        id: tf_apply
        env: 
           AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
           AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
           TF_VAR_aws_access_key_id:  ${{ secrets.AWS_ACCESS_KEY_ID }}
           TF_VAR_aws_secret_access_key:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        working-directory: Terraform/ECR   
        run: |
            terraform apply -auto-approve
            echo "::set-output name=aws_ecr_registry_id::$(terraform-bin output -raw aws_ecr_registry_id)"
            echo "::set-output name=aws_ecr_repository_url::$(terraform-bin output -raw aws_ecr_repository_url)"
      outputs:
            aws_ecr_registry_id: ${{ steps.tf_apply.outputs.aws_ecr_registry_id }}
            aws_ecr_repository_url: ${{ steps.tf_apply.outputs.aws_ecr_repository_url }}

  build-img:
    name: Build Docker Image, Scan It (Security), and Push It to ECR
    needs: create_ecr_registry
    runs-on: ubuntu-latest
    steps:

    - name: Check out code
      uses: actions/checkout@v2

    - name: Configure AWS Credentials For GitHub Actions
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, and tag Docker Image
      id: build_image
      env:
        ECR_REPOSITORY_URL: ${{needs.create_ecr_registry.outputs.aws_ecr_repository_url}}
        IMAGE_TAG: tmf632-party-mgmt-api
      run: |
        echo "$ECR_REPOSITORY_URL"
        echo "$ECR_REPOSITORY_URL:$IMAGE_TAG"
        docker build -t $ECR_REPOSITORY_URL:$IMAGE_TAG -f docker/Dockerfile ./
        echo "Docker Image: ${ECR_REPOSITORY_URL}:${IMAGE_TAG}"
        echo "::set-output name=ecr_repository_url::$ECR_REPOSITORY_URL"
        echo "::set-output name=ecr_image_tag::$IMAGE_TAG"
        echo "::set-output name=ecr_image::$ECR_REPOSITORY_URL:$IMAGE_TAG"

    - name: Push Ducker Image to AWS ECR
      id: push_image
      env:
        ECR_REPOSITORY_URL: ${{needs.create_ecr_registry.outputs.aws_ecr_repository_url}}
        IMAGE_TAG: tmf632-party-mgmt-api
      run: |
        echo "$ECR_REPOSITORY_URL"
        echo "$ECR_REPOSITORY_URL:$IMAGE_TAG"
        docker build  -t $ECR_REPOSITORY_URL:$IMAGE_TAG -f docker/Dockerfile ./
        docker push $ECR_REPOSITORY_URL:$IMAGE_TAG

    
