name: Unit Tests

on:
  push:
    branches:
      - master

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Upgrade pip
        run: |
            python -m pip install --upgrade pip
      - name: Install dependencies
        #working-directory: api
        run: |
            cd api
            pip install -r requirements.txt
      - name: Run tests
        env: 
          APP_ENV: test
        run: | 
            pytest


  security_scan:
      name: Security Scan
      runs-on: ubuntu-latest
      steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run Trivy vulnerability scanner in fs mode
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          trivy-config: trivy.yaml



  scan_terraform_scripts:
      name: Scan Terraform Scripts  
      runs-on: ubuntu-latest
      steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Python 3.9
        uses: actions/setup-python@v1
        with:
              python-version: 3.9
      - name: Checkov Test
        uses: bridgecrewio/checkov-action@master 
        with:
          directory: Terraform/ECR
          framework: terraform


  create_ecr_registry:
    name: ECR Registry in AWS
    needs: [unit-tests, security_scan, scan_terraform_scripts]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.4

      - name: Terraform Init
        env: 
           AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
           AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        working-directory: Terraform/ECR   
        run: terraform init

      - name: Terraform Validate
        env: 
           AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
           AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        working-directory: Terraform/ECR   
        run: terraform validate

      - name: Terraform Plan
        id: plan
        env: 
           AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
           AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
           TF_VAR_aws_access_key_id:  ${{ secrets.AWS_ACCESS_KEY_ID }}
           TF_VAR_aws_secret_access_key:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        working-directory: Terraform/ECR    
        run: terraform plan -no-color -input=false
        continue-on-error: true

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1


      - name: Terraform Apply
        env: 
           AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
           AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
           TF_VAR_aws_access_key_id:  ${{ secrets.AWS_ACCESS_KEY_ID }}
           TF_VAR_aws_secret_access_key:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        working-directory: Terraform/ECR   
        run: terraform apply -auto-approve
